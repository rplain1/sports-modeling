
```{python}
import numpy as np
import pandas as pd
import pymc as pm
import xarray as xr
import arviz as az
from arviz.stats.stats import hdi
from scipy import stats as stats
from matplotlib import pyplot as plt
import duckdb
import polars as pl
from plotnine import ggplot, aes, geom_density, geom_col

rng = 527
```

```{python}


def get_data(season):
    return (
        pl.scan_parquet(
            f"https://github.com/sportsdataverse/sportsdataverse-data/releases/download/espn_wnba_team_boxscores/team_box_{season}.parquet",
        )
        .filter(
            (~pl.col("team_name").str.contains("Team"))
            & (pl.col("season_type") == 2)  # regular season
        )
        .select(
            [
                "game_id",
                "season",
                "season_type",
                "game_date",
                "game_date_time",
                "team_id",
                "team_location",
                "team_name",
                "team_abbreviation",
                "team_display_name",
                "team_color",
                "team_alternate_color",
                "team_logo",
                "team_home_away",
                "team_score",
                "team_winner",
                "assists",
                "blocks",
                "defensive_rebounds",
                "field_goal_pct",
                "field_goals_made",
                "field_goals_attempted",
                "fouls",
                "free_throw_pct",
                "free_throws_made",
                "free_throws_attempted",
                "largest_lead",
                "offensive_rebounds",
                "steals",
                "team_turnovers",
                "three_point_field_goal_pct",
                "three_point_field_goals_made",
                "three_point_field_goals_attempted",
                "total_rebounds",
                "total_technical_fouls",
                "total_turnovers",
                "turnovers",
                "opponent_team_id",
                "opponent_team_location",
                "opponent_team_name",
                "opponent_team_abbreviation",
                "opponent_team_display_name",
                "opponent_team_short_display_name",
                "opponent_team_color",
                "opponent_team_alternate_color",
                "opponent_team_logo",
                "opponent_team_score",
            ]
        )
        .collect()
    )


df = pl.concat([get_data(season) for season in range(2021, 2025)])
```


```{python}
df_single_game = df.with_columns(pl.lit(0).alias('row_num')).with_columns(pl.col('row_num').cum_count().over('game_id')).filter(pl.col('row_num') == 1)

df_results = df_single_game.with_columns(
    total_score = pl.col('team_score') + pl.col('opponent_team_score'),
    mov = pl.when(pl.col('team_score') >= pl.col('opponent_team_score')).then(pl.col('team_score') - pl.col('opponent_team_score')).otherwise(pl.col('opponent_team_score') - pl.col('team_score'))
)

```


```{python}
(
    ggplot(df_results["total_score"].value_counts(), aes("total_score", "count"))
    + geom_col()
)

df_mov = (
    df_results["mov"]
    .value_counts()
    .sort("mov")
    .with_columns(perc=pl.col("count") / pl.col("count").sum())
    .with_columns(cum_perc=pl.col("perc").cum_sum())
)

(ggplot(df_results["mov"].value_counts(), aes("mov", "count")) + geom_col())
(ggplot(df_mov, aes("mov", "cum_perc")) + geom_col())
df_mov.filter(pl.col("cum_perc") <= 0.5)
df_mov.filter(pl.col("mov") <= 7)
```


```{python}
df_long = df[['game_id', 'game_date', 'team_home_away', 'team_id', 'team_name', 'team_score', 'opponent_team_id', 'opponent_team_name',
''
]]

df_long.join(
    df_long.select(['game_id', 'game_date'])
)

```


## Player data


```{python}

def get_player_data(season):
    return (
        pl.scan_parquet(
            f"https://github.com/sportsdataverse/sportsdataverse-data/releases/download/espn_wnba_player_boxscores/player_box_{season}.parquet",
        )
        .filter(
            (~pl.col("team_name").str.contains("Team"))
            & (pl.col("season_type") == 2)  # regular season
            & (pl.col('did_not_play') == False)
        )
        .collect()
    )


df = pl.concat([get_player_data(season) for season in range(2006, 2025)])
```


```{python}
(ggplot(df["points"].value_counts(), aes("points", "count")) + geom_col())

df_points = (
    df["points"]
    .value_counts()
    .sort("points")
    .with_columns(perc=pl.col("count") / pl.col("count").sum())
    .with_columns(cum_perc=pl.col("perc").cum_sum())
)

(ggplot(df_points, aes("points", "cum_perc")) + geom_col())
df_mov.filter(pl.col("cum_perc") <= 0.5)
df_mov.filter(pl.col("mov") <= 20)
```
